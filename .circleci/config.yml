version: 2.1
orbs:
  compass: atlassian-labs/compass@0.1.3
  maven: circleci/maven@1.4.1
          
executors:
  with-chrome:
    docker:
      - image: 'cypress/browsers:node14.16.0-chrome90-ff88'
  base:
    docker:
      - image: cimg/deploy:2022.08
  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
    
    resource_class: xlarge
  python38:
    docker:
      - image: cimg/python:3.8


jobs:
  python-checkstyle:
    executor: python38
    steps:
      - checkout
      - run: pip install pylint
      - run:
          name: Lint Python
          command: pylint --rcfile=./.pylintrc ./src/*/*.py

  python-test:
    executor: python38
    steps:
      - checkout
      - run: mkdir test-reports
      - run:
          name: Test Python Services
          command: |
            for SERVICE in "contacts" "userservice"; do
              echo "testing $SERVICE..."
              # save current working dir to memory and cd to src/$SERVICE
              pushd src/$SERVICE
                python3 -m venv $HOME/venv-$SERVICE
                source $HOME/venv-$SERVICE/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                #CLI wraps test runner to allow "rerun failed tests only"
                TEST_FILES=$(circleci tests glob "tests/test_*.py")
                echo $TEST_FILES | circleci tests run --command="xargs python -m pytest --junit-xml=../../test-reports/report-${SERVICE}.xml -v -p no:warnings" --verbose --split-by=timings
                deactivate
              # return to previously saved path
              popd
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  java-checkstyle:
    executor: jdk17
    steps:
      - checkout
      - maven/with_cache:  
          verify_dependencies: false       
          steps: 
          - run: ./mvnw checkstyle:check


  java-test-and-code-cov:
    executor: jdk17
    steps:
      - checkout
      - run: mkdir test-reports
      - restore_cache:
          keys:
            - v2-mvn-full-{{ .Branch }}
            - v2-mvn-full-
      - run: mvn dependency:go-offline
      - save_cache:
          key: v2-mvn-full-{{ .Branch }}
          paths:
            - ~/.m2
      - run:
          environment:
            PARAM_IT_PATTERN: '**/*IT*.java'
            PARAM_TEST_DIR: 'src/**/src/test/java'
            PARAM_TEST_PATTERN: '**/*Test*.java'
          name: Parellel and Selected Tests
          command: |
            echo -e "\033[31m\033[4mOrb Notes on Test Splitting\033[0m
                    \033[34mCaveat 1:\033[0m  CircleCI Test Splitting uses filename by default, but JUnit reports use class names.
                    Therefore this orb uses naive translation of linux file paths to dot separated package names and strips the .java suffix.
                    \033[34mCaveat 2:\033[0m  Surefire and Failsafe both allow <includes> in pom configuration (which can come from parent projects).
                    These values are appended to any -DincludeFiles argument (meaning it would still run all tests on every node).
                    Therefore this orb will generate an exclusion list; a list of tests being run on the other nodes, and pass that to surefire/failsafe as an exclusion.
                    \033[34mDebugging:\033[0m This orb will place all files used to decide tests in .circleci/tests and export it as an artifact for inspection/debugging.
                    "
            mkdir -p .circleci/tests/

            # generate excluded surefire tests using provided pattern, convert slashes to periods (classnames)
            circleci tests glob 'src/**/src/test/java/**/*Test*.java' | \
                sed -e 's#^src/[a-z]*/src/test/java/\(.*\).java#\1#' | \
                tr "/" "." > .circleci/tests/surefire_classnames
            cat .circleci/tests/surefire_classnames | circleci tests run --command 'tr " " "," | xargs -I {} ./mvnw -B  -DfailIfNoTests=false -Dtest={} test' --verbose --split-by=timings  
      - run: 
          name: aggregate all module tests
          when: always
          command: |
            for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
            echo "checking $SERVICE..."
            # save current working dir to memory and cd to src/$SERVICE
            cp src/$SERVICE/target/surefire-reports/*.xml test-reports || echo "No tests for this node"
            # return to previously saved path
            done
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - store_artifacts:
          path: .circleci/tests/
  skaffold-build-push:
      executor: jdk17
      steps:
        - checkout
        - run: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
        - load-credentials    
        - setup_remote_docker:
            docker_layer_caching: true
        - restore_cache:
            keys:
              - v2-mvn-full-{{ .Branch }}
              - v2-mvn-full-
        - restore_cache:
            keys:
              - v1-skaffold-{{ .Branch }}
              - v1-skaffold-
        - run: |
            export DOCKER_TAG=build$(git rev-parse HEAD:src)
            echo "${NEXUS_PASSWORD}" | docker login --username ${NEXUS_USERNAME} --password-stdin docker.nexus.cera.circleci-labs.com
            # seems like skaffold jib needs a eird kick, hit me locally, passes on second run
            ./mvnw jib:_skaffold-fail-if-jib-out-of-date -Djib.requiredVersion=1.4.0 --projects src/ledgerwriter --also-make jib:_skaffold-files-v2 --quiet --batch-mode
            mkdir output
            skaffold build --build-concurrency=4 --default-repo=docker.nexus.cera.circleci-labs.com --file-output=output/tags.json
            ls /tmp/
        - save_cache:
            key: v1-skaffold-{{ .Branch }}
            paths:
              - ~/.skaffold/cache
        - persist_to_workspace:
            root: output
            paths: [ 'tags.json' ]
 

  deploy:
    executor: base
    parameters:
      boa-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
    environment:
      BOA_ENV: <<parameters.boa-environment>>
    steps:
      - checkout
      - load-credentials
      - run: echo "Now using ${K8S_USER}@${K8S_NAMESPACE}"
      - run: |
          sudo apt update && sudo apt install kubectl -y
          echo ${K8S_CERT} | base64 -d > ca.crt
          kubectl config set-cluster ${K8S_CLUSTER} --server=${K8S_URL} --certificate-authority=ca.crt
          export DECODED_TOKEN=$(echo ${K8S_TOKEN} | base64 -d) #kubectl prints an encoded value, MUST decode it to work.
          kubectl config set-credentials ${K8S_USER} --token=${DECODED_TOKEN}
          kubectl config set-context default --user=${K8S_USER}  --cluster=${K8S_CLUSTER} --namespace ${K8S_NAMESPACE}
          kubectl config use-context default
          kubectl get serviceaccounts -n ${K8S_NAMESPACE}
      - attach_workspace:
          at: output
      - run: 
          name: Deploy BoA
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
            skaffold deploy --default-repo=docker.nexus.cera.circleci-labs.com --namespace=${K8S_NAMESPACE} --build-artifacts=output/tags.json
      - run:
          name: Wait for deployment
          command: |
            kubectl wait deployment -n ${K8S_NAMESPACE} frontend --for condition=Available=True --timeout=90s
      - run: 
          name: Print Frontend URL
          command: kubectl get service frontend -n ${K8S_NAMESPACE} | awk '{print $4}'
  e2e:
    executor: with-chrome
    steps:
      - checkout
      - run: 
          name: Run Cypress Tests
          command: |
            cd ui-tests
            npx cypress run \
            --config baseUrl=https://dev.cera.circleci-labs.com \
            --browser firefox \
            --reporter junit \
            --reporter-options "mochaFile=results/my-test-output-[hash].xml"
      - store_test_results:
          path: ui-tests/results
      - store_artifacts:
          path: ui-tests/cypress/videos
      - store_artifacts:
          path: ui-tests/cypress/screenshots    
   
workflows:
  main:
    jobs:
      - java-checkstyle:
          context: [ compass-integration-bank-of-aion ]
      - java-test-and-code-cov
      - python-checkstyle
      - python-test
      - skaffold-build-push:
          context: cera-vault-oidc
      - deploy:
          name: Deploy Dev
          requires: [ skaffold-build-push, python-test, java-test-and-code-cov ]
          context: [ compass-integration-bank-of-aion, cera-vault-oidc ]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: development
      - e2e:
          requires: [ Deploy Dev ]
      - deploy:
          name: Deploy Production
          requires: [ e2e ]
          boa-environment: prod
          context: [ compass-integration-bank-of-aion, cera-vault-oidc-prod ]
          filters:
            branches:
              only: [ main ]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: production
                environment: CERA-Cluster-Namer-Prod


commands:
  load-credentials:
    steps:
      - run:
          name: install vault agent (if not present)
          command: |
            vault -h && exit 0 || echo "Installing vault"
            #only runs if vault command avbove failed
            cd /tmp
            wget https://releases.hashicorp.com/vault/1.12.2/vault_1.12.2_linux_amd64.zip
            unzip vault_1.12.2_linux_amd64.zip
            sudo mv vault /usr/local/bin        
            vault -h    
      - run:
          name: Load Credentials from Vault
          command: |
            ROLE=${BOA_ENV:-"dev"} #fallback to dev when empty
            echo "Environment (BOA_ENV ): $BOA_ENV"
            export VAULT_ADDR="https://vault.cera.circleci-labs.com"
            export VAULT_TOKEN=`vault write -field=token auth/jwt/login role=boa-$ROLE-deploy jwt=$CIRCLE_OIDC_TOKEN`
            vault read -format=json secret/data/cluster/boa-pipeline-$ROLE > /tmp/cluster-secret.json
            jq -r '.data.data | to_entries[] | "export K8S_"+(.key | ascii_upcase)+"="+(.value | @sh) ' /tmp/cluster-secret.json >> $BASH_ENV
            vault read -format=json secret/data/nexus/boa-deployer > /tmp/nexus-secret.json
            jq -r '.data.data | to_entries[] | "export NEXUS_"+(.key | ascii_upcase)+"="+(.value | @sh) ' /tmp/nexus-secret.json >> $BASH_ENV



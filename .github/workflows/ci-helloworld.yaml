# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Continuous Integration - Pull Request"
on: push
jobs:
  Java-Checkstyle:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    - name: Java Checkstyle
      run: mvn checkstyle:check
  
  Java-Unit-Tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'
    - name: Java Unit Tests
      timeout-minutes: 20
      run: |
        mvn test
    - name: Java Code Coverage
      timeout-minutes: 20
      run: |
        for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
          echo "checking $SERVICE..."
          # save current working dir to memory and cd to src/$SERVICE
          pushd src/$SERVICE
            mvn jacoco:report
            echo "Coverage for $SERVICE:"
            awk -F, \
            '{ instructions += $4 + $5; covered += $5 } END \
            { print covered, "/", instructions, " instructions covered"; \
            print int(100*covered/instructions), "% covered" }' \
            target/site/jacoco/jacoco.csv
          # return to previously saved path
          popd
        done

  Python-Checkstyle:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' 
    - run: pip install pylint
    - run: pylint --rcfile=./.pylintrc ./src/*/*.py

  python-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: mkdir test-reports
      - name: Test Python Services
        uses: actions/setup-python@v4
      - run: |
            for SERVICE in "contacts" "userservice"; do
              echo "testing $SERVICE..."
              # save current working dir to memory and cd to src/$SERVICE
              pushd src/$SERVICE
                python3 -m venv $HOME/venv-$SERVICE
                source $HOME/venv-$SERVICE/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                python -m pytest --junit-xml=../../test-reports/report-${SERVICE}.xml -v -p no:warnings
                deactivate
              # return to previously saved path
              popd
            done
      - name: Store Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
            files: |
              test-reports
      - name: Store Artifacts
        uses: actions/upload-artifact@v3
        with:
           path: test-reports
    
  # Python-Checksyle:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10' 
  #       steps:
  #   - name: Java Unit Tests
  #     timeout-minutes: 20
  #     run: |
  #       pylint --rcfile=./.pylintrc ./src/*/*.py

    
    
      # - name: Load Credentials from Vault
      #   run: |
      #     ROLE=${BOA_ENV:-"dev"} #fallback to dev when empty
      #     echo "Environment (BOA_ENV ): $BOA_ENV"
      #     export VAULT_ADDR="https://vault.cera.circleci-labs.com"
      #     export VAULT_TOKEN=`vault write -field=token auth/jwt/login role=boa-$ROLE-deploy jwt=$CIRCLE_OIDC_TOKEN`
      #     vault read -format=json secret/data/cluster/boa-pipeline-$ROLE > /tmp/cluster-secret.json
      #     jq -r '.data.data | to_entries[] | "export K8S_"+(.key | ascii_upcase)+"="+(.value | @sh) ' /tmp/cluster-secret.json >> $BASH_ENV
      #     vault read -format=json secret/data/nexus/boa-deployer > /tmp/nexus-secret.json
      #     jq -r '.data.data | to_entries[] | "export NEXUS_"+(.key | ascii_upcase)+"="+(.value | @sh) ' /tmp/nexus-secret.json >> $BASH_ENV